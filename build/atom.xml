<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>SIGUSR2</title><link href="http://sigusr2.net/atom.xml" rel="self" /><link href="http://sigusr2.net/"/><updated>2009-10-01T08:55:12Z</updated><author><name>Andrew Gwozdziewycz</name></author><id>md5:ec2c8804a8dac6a866e1a43cfce32fc1</id><entry><title>Python Worlds</title><link href="/2009/Oct/01/python-worlds.html"/><id>md5:8ec25d2f452904fcb32829303656bf92</id><updated>2009-10-01T00:00:00Z</updated><content type="html"><![CDATA[<p><span class="preamble">Last year, I was introduced to a paper via <a href="http://lambda-the-ultimate.org/node/3040">Lambda the Ultimate</a> about <q>worlds,</q> a language construct which allows one to control the scope of side effects while programming.</span></p>

<p>Worlds allow you to capture the current scope of a program in a first-class way. All updates to the current state (i.e. local variables, global variables) happen in a non-commiting way. In other words, you can back out of any changes at any time.</p>

<p>Consider the following example (taken from the <a href="http://www.vpri.org/pdf/rn2008001_worlds.pdf">Warth paper</a>):</p>

<pre><code class="javascript">A = thisWorld; // thisWorld is always the current world
r = new Rectangle(4, 6);

B = A.sprout(); // sprout creates a new world with it's parent set to A
in B { r.h = 3; } // side effects within this `in' occur only in the world B.

C = A.sprout();
in C { r.h = 7 }; // in A's world r.h = 6 still.

C.commit(); // only now does r.h = 7 in world A.
</code></pre>

<p>If you follow along in the comments I've appended to the example, you'll start to see why this idea is interesting, even from this little example.</p>

<p>The astute Scheme programmer, however, will notice almost certainly that this construct could be created with <code class="inline">call/cc</code>, which is certainly true. The problem with this fact is that not all programming languages are Scheme (unfortunately), and of course not all languages support first-class <a href="http://en.wikipedia.org/wiki/Continuation">continuations</a>.</p>

<p>The question I asked myself, however, is this: <q>Can I hack worlds into Python?</q> To which I came up with the short answer after some thinking, <q>sort of.</q>

<p>I guess I should explain what's going on more clearly in the example above. The first thing to note is that <code class="inline">A</code> represents the current scope; the current state of all variables in the program. <q>Sprouting</q> a new world from an existing world means that any changes that occur when using the sprouted world, do not affect the world who sprouted the current world, unless the new world <em>commits</em> the changes made to the original world.</p>

<p>Which is to say, changes that occur in an <code class="inline">in</code> block acting on world <code class="inline">X</code> do not propagate to the parent (the world <code class="inline">X</code> was sprouted from) of <code class="inline">X</code> unless <code class="inline">X.commit()</a> is called.</p>

<h3>Enter Context Managers</h3>

<p>A few months ago, I wrote a blog post about <em><a href="">Dispatching With "with"</a></em>, in which I explained <a href="">context managers</a> in Python, and how they can be exploited to create a less separated mapping from URLs to request handlers (something that definitely has its place in the small web-app world).</p>

<p>The basic idea of this was that in the <code class="inline">__exit__</code> method of the web-application object, the current frame was inspected and references to functions that represent HTTP methods would be collected, stored and tied to the last regular expression passed to the <code class="inline">expose</code> method in the application object. This simple solution allowed us to express a web application succinctly like so:

<pre><code class="python">app = web.application()
with app.expose('/'):
   def get(): 
       return "Hello World"
app.run()
</code></pre>

<p>For worlds, I also exploit context managers, though mostly for the <code class="inline">in</code>-like syntax, and for managing the current <code class="inline">thisWorld</code> variable.</p>

<p>The quick<a href="#f1">[1]</a> solution that I came up with for <a href="http://github.com/apgwoz/python-worlds">implementing worlds</a> can be used like so:</p>

<pre><code class="python">with Universe(): # establishes new world, assigns to local variable `thisWorld'
   thisWorld.r = True # must assign <em>directly</em> in the world. LIMITATION
   new = thisWorld.sprout() 

   with new:
       new.r = False

   with new.sprout():
       thisWorld.r = 15
       thisWorld.commit() # now new.r is 15, but the original r is still True

   print thisWorld.r # => True
   new.commit()
   print thisWorld.r # => 15
   thisWorld.commit() # have to commit to the actual scope LIMITATION
   # r is now part of the local variables where this universe exists
   print r # => 15 
</code></pre>

<p>Looking at this example, it's already apparent that the Warth implementation of worlds is superior, just in the amount of code needed to take advantage of it. You might also see that I didn't even attempt to port the rectangle example  from above. That is because there isn't anything smart going on under the hood when it comes to container objects (such as lists, tuples, objects, dicts), and I'm not yet sure how to get there.</p>

<p>With simple immutable objects such as booleans, integers and strings, using copy-on-write semantics works wonderfully. Then, on <code class="inline">commit</code> of the world, the code just copies all of the changes into its parent. I haven't tackled the case of mutable container objects just yet, as there are complications in the API<a href="#f2">[2]</a>, as well as the implementation.</p>

<p>The interaction with this is sort of annoying though. In order to take advantage of worlds in Python, you have to touch virtually every line of code in the function you are trying to <q>worldize</q>, because you must assign explicitly to a world. The world's context manager sets up <code class="inline">thisWorld</code> for you, but you still have to do <code class="inline">thisWorld.<em>variable</em></code> to get any sort of benefit.</p>

<p>My inclination is to get into some bytecode hacking to modify all assignments within the <code class="inline">with</code> block to be assignments to <code class="inline">thisWorld</code> automatically, but bytecode hacks are neither pleasant to maintain, nor are they portable across implementations.</p>

<p>It's also possible in the Warth version to <q>worldize</q> functions and any other first class object. Maybe the solution is simple and I just haven't seen it yet. Whatever hacks, that I come up with though, will be just that, hacks, as there is no <em>easy</em> way to add worlds to Python in the same way that Warth added them to JavaScript<a href="#f3">[3]</a>.</p>

<p>We are in an age of programming where mainstream programming languages are unable to adapt to our needs as programmers. We are unable to bend them at our will like we can with <a href="http://en.wikipedia.org/wiki/Scheme_%28programming_language%29">Scheme</a>, <a href="http://common-lisp.net/">Lisp</a> and even <a href="http://clojure.org/">Clojure</a>. Attempts to bring about change on this front have not been met with enthusiasm from most groups. Whether it's a lack of marketing, evangelism or just that the general population doesn't view <q>unbendability</q> as a problem, I'm not sure. But, I for one like the idea of being able to <em>easily</em> add worlds, and other ideas, as <em>true</em> language features to languages that by practicality, I'm forced into using. That would make me a much happier, and effective programmer.</p>

<ol class="footnotes">
    <li id="f1">By quick, I do mean quick. This was 2 hours of work and sketching. Surely there is lots of work to be done to make it a true solution.</li>
    <li id="f2">The same strategy could be used as for simple values like booleans, if the API used a method, say <code class="inline">assign</code> instead of the more natural assignment operator. Consider, <code class="inline">thisWorld.assign('obj.height.inches', 30)</code> vs. <code class="inline">thisWorld.obj.height.inches = 30</code>.</li>
    <li id="f3">The Worlds prototype was written in <a href="http://tinlizzie.org/ometa/">OMeta</a>, which is a solution to the "unbendable" languages problem. Note: I didn't attempt to write worlds in PyMeta, but, it may be possible to do.</li>
</ol>
]]></content></entry>
<entry><title>Bitten... Really Hard</title><link href="/2009/Sep/09/bitten-really-hard.html"/><id>md5:56c6a1146108e40e674d0df15cd6c5b2</id><updated>2009-09-09T00:00:00Z</updated><content type="html"><![CDATA[<p><span class="preamble">Last Friday I was bitten really hard by something I would not have, in my wildest dreams think would bite me, Python's <a href="http://docs.python.org/library/urllib2.html"><code class="inline">urllib2</a></code>.</span></p>

<p>It is the ever so common case that you always hear, <q>It works fine here, it must be your fault.</q> And, boy did I come up with some interesting theories as to why it was not the fault of my code.</p>

<p>Basically, I'm POSTing some data to a resource that is protected by <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">HTTP Basic Authentication</a>, and then reading the response for further processing. It is a basic task, and one that I've done many times in the past.</p>

<p>In fact, I've even used <code class="inline">urllib2</code> to do this before using the following method:</p>
<pre>
<code class="python">headers = {'User-Agent': useragent}
req = urllib2.Request(url, data, headers)
 
passmgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
passmgr.add_password(None, url, username, passwd)
handler = urllib2.HTTPBasicAuthHandler(passmgr)
opener = urllib2.build_opener(handler)
connection = opener.open(req)
</code>
</pre>

<p>In this case, the following behavior is seen:</p>

<ol>
  <li>Client (urllib2) POSTs data leaving out the <code class="inline">Authorization</code> header</li>
  <li>Server responds with a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.2">401</a>. Client (urllib2) never sees the 401 error, and instead gets a <a href="http://en.wikipedia.org/wiki/SIGPIPE">SIGPIPE</a></li>
  <li>Client attempts to reconnect, going right back to step 1</li>
</ol>

<p>Naturally, the only way I discovered this was to fire up <a href="http://en.wikipedia.org/wiki/Tcpdump">tcpdump</a> and look at what was being sent. It quickly became obvious that there was never an <code class="inline">Authorization</code> header being sent, and therefore the 401 was completely justified. The broken pipe seems to have come from the server responding before reading all of the posted data to thwart off <a href="http://en.wikipedia.org/wiki/Denial-of-service_attack">denial of service</a> attacks.</p>

<p>My only explanation for why this works perfectly fine on my laptop and not in either of the data centers I tried running it from is latency, though I'm shocked, and not yet convinced, by that result.</p>

<p>Incidentally, I solved the problem by sending the <code class="inline">Authorization</code> header on first request, rather than waiting for the confirmation that, yes indeed, the resource needs the Authorization header sent, as <code class="inline">urllib2</code> likes to do.</p>

<code class="python">headers = {'User-Agent': useragent, 
         'Authorization': 'Basic ' + base64.b64encode(username + ':' + passwd)}
req = urllib2.Request(url, data, headers)
connection = urllib2.urlopen(req)
</code>

<p>... and now it works fine.</p>

<p>This whole experience will make me think twice before laying the blame anywhere until I have uncovered the real truth, something I think all programmers should learn to do, if they don't know already.</p>
]]></content></entry>
<entry><title>The Case of the Unusable Reusable</title><link href="/2009/Jul/22/case-of-the-unusable-reusable.html"/><id>md5:1790e770e90b7ed37ba8eeeda62034a7</id><updated>2009-07-22T00:00:00Z</updated><content type="html"><![CDATA[<p><span class="preamble">The <a href="http://www.djangoproject.com/">Django</a> web framework has a huge following that releases lots of simple reusable apps that can be plugged into your website. However, sometimes they are too simple, and not "plugin-able" quite enough.</span></p>

<p>Take for instance <a href="http://code.google.com/p/django-favorites/" title="django-favorites on Google Code">django-favorites</a>. By itself it's a great package that does exactly what you want&mdash;it allows a user to mark things as being a favorite. Notice that I said "things." "Things" here means any model, because it uses the <a href="http://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#id1" title="Generic Relations">generic relationships</a> framework that Django provides.</p>

<p>This is a huge win on its own because it means that I don't have to define a new favorites model for blog posts, one for photos and another for music I'm listening too. But, there's a downside to this as well.</p>

<p>How do I check to see if an item is a favorite? Well, for each blog post I select back from the database, I have to make another query to see whether or not it was a favorite or not. Alternatively, of course, I could be smarter and do a bulk query using an <code class="inline">IN</code> clause, making the query count only 2. But, if I wasn't using an <a href="http://en.wikipedia.org/wiki/Object-relational_mapping" title="Object Relational Mapper">ORM</a>, my SQL would use an <code class="inline">OUTER JOIN</code>, or a sub-query to select back whether or not it was marked a favorite for the current user.</p>

<p>Django can do this using the <a href="http://docs.djangoproject.com/en/dev/ref/models/querysets/#queryset-methods-that-return-new-querysets"><code class="inline">extra</code></a> method for <code class="inline">QuerySet</code>s.</p>

<p>Ok, so we can use <code class="inline">extra</code> every time we want to 
select back whether or not an item is a favorite, no big deal.</p>

<code class="python">content_type = ContentType.objects.get_for_model(Photo)
SQL = """SELECT 1 FROM favorites_favorite f
WHERE f.content_type_id = %(content_type)d and
      f.object_id = photos_photo.id and
      f.user_id = %(user_id)d
"""
attrs = {'content_type': content_type.id, 'user_id': user.id}
entries = Photo.objects.extra(select={'is_favorite': SQL % attrs})
</code>

<p>Except that you have to do this every time. So, you then create a custom manager for <code class="inline">Photo</code> that includes a <code class="inline">check_is_favorite</code> method, which adds the <code class="inline">is_favorite</code> pseudo-column and everything is good.</p>

<p>That is until you have to do it for <code class="inline">Entry</code>, and <code class="inline">Song</code>, and <code class="inline">User</code>.</p>

<p>The solution however is simple. Reusable apps should include a "ManagerMixin", if it makes sense to make reusing the app as painless as possible. The django-favorites application that I've been using in my example would be complete in my eyes if it had something like this defined in it:</p>

<code class="python">class FavoritesManagerMixin(object):
    """ A Mixin to add a `favorite__favorite` column via extra 
    """
    def with_favorite_for(self, user, all=True):
        """ Adds a column favorite__favorite to the returned object, which
        indicates whether or not this item is a favorite for a user
        """
        content_type = ContentType.objects.get_for_model(self.model)
        pk_field = "%s.%s" % (qn(self.model._meta.db_table),
                              qn(self.model._meta.pk.column))

        favorite_sql = """(SELECT 1 FROM %(favorites_db_table)s 
WHERE %(favorites_db_table)s.object_id = %(pk_field)s and
      %(favorites_db_table)s.content_type_id = %(content_type)d and
      %(favorites_db_table)s.user_id = %(user_id)d)
""" % {'pk_field': pk_field, \
           'db_table': qn(self.model._meta.db_table), \
           'favorites_db_table': qn(Favorite._meta.db_table), \
           'user_id': user.pk, \
           'content_type': content_type.id, \
           }

        extras = {
            'select': {'favorite__favorite': favorite_sql},
            }

        if not all:
            extras['where'] = ['favorite__favorite == 1']

        return self.extra(**extras)
</code>

<p>I have yet to run a bench mark against this to determine whether or not the sub-query here is less efficient than doing an <code class="inline">OUTER JOIN</code>. My gut says it would be, but for a first go at it, I'll keep it like this.</p>

<p>Anyway, then to make use of this you create a custom manager that uses <code class="inline">FavoritesManagerMixin</code> as one of its base classes:</p>

<code class="python">class SongManager(models.Manager, <strong>FavoritesMixinManager</strong>):
    pass

class Song(models.Model):
    title = models.CharField(max_length=255, null=False, blank=False)
    artist = models.ForeignKey('Artist')
    album = models.ForeignKey('Album')

    <strong>objects = SongManager()</strong>
</code>

<p>And then to make use of it, we do:</p>
<code class="python">all_songs_with_favorites_marked = Song.objects.with_favorite_for(user)
only_favorite_songs = Song.objects.with_favorite_for(user, all=False)
</code>

<p>The intention of this post isn't to point out a flaw in django-favorites, an otherwise great reusable application, BTW, but instead is meant to give a way that this idea of reusable can actually be usable.</p>

<p>I put my django-favorites on <a href="http://github.com/apgwoz/django-favorites/">github</a>. Feel free to flame me for going against what this post stands for and creating yet another "favorites" reusable app, without submitting a patch to the original, I wanted some practice in Django development.
</p>
]]></content></entry>
<entry><title>The Hacker's Utility Belt: SSH</title><link href="/2009/May/07/hacker-utility-belt-ssh.html"/><id>md5:1c30eb53e322a859bb17913f525bd6ef</id><updated>2009-05-07T00:00:00Z</updated><content type="html"><![CDATA[<p><span class="preamble">Most hackers<a href="#f1">[1]</a> aren't <a href="http://en.wikipedia.org/wiki/Batman">Batman</a>, but aside from <a href="http://en.wikipedia.org/wiki/Batman%27s_utility_belt">Batman's utility belt</a>, the Batcave and Alfred, he's no different than you and me.</span></p>

<p>He's got strength and training on his side, but I could probably take him if he didn't have his belt and was blindfolded. Give him his utility belt though, and I'd be doomed. That's not because his belt has super powers&mdash;instead his belt contains tools that are useful in common situations of distress, and of course detective work. The Bat-grappling hook for instance allows him to scale buildings and walls, and tranquillizer darts allow him to temporarily disable a foe. Batarangs, with practice, can be used to disable an opponent by aiming for a body part, or to cut down a hanging chandelier, creating yet another obstacle for foes to fight through.</p>

<p>Hackers have similar tools, but we carry them in "/usr/bin/" (though how cool would it have been if the <a href="http://en.wikipedia.org/wiki/Unix">Bell Labs folks</a> named it "/usr/belt/" instead). The tools <em>we</em> use, generally allow us to solve problems quickly and efficiently&mdash;just like Batman.</p>

<p>The tool that I've come to rely on quite a bit recently is <a href="http://en.wikipedia.org/wiki/Secure_Shell">SSH</a>. Most hackers use SSH for working remotely on servers, and for copying files over <a href="http://en.wikipedia.org/wiki/Secure_copy">SCP</a> or <a href="http://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol">SFTP</a>. Some may even use <a href="http://en.wikipedia.org/wiki/Filesystem_in_Userspace">FUSE</a> and <a href="http://en.wikipedia.org/wiki/SSHFS">SSHFS</a> to mount file systems over SSH. Its potential uses are endless, but the most useful uses for me lately have been tunneling and <a href="http://en.wikipedia.org/wiki/SOCKS">SOCKS</a> proxies.</p>

<h3>Tunneling</h3>
<p>As a programmer who on occasion works from home (more so currently), it's often a battle to connect to all of the company resources I need in order to perform my job. Firewalls are good things, and are configurable to allow remote people access to walled gardens, but with dynamic <a href="http://en.wikipedia.org/wiki/IP_address" title="Internet Protocol Address">IP addresses</a> being the common norm, opening up resources to many different addresses gets hard for sysadmins to track. Besides, they've got a ton on their plate already.</p>

<p>To combat this problem, <a href="http://en.wikipedia.org/wiki/VPN" title="Virtual Private Network">VPN</a>s were created. Basically, a VPN allows one to connect networks together as if they were local to each other. When I use my companies VPN, it's as if I'm sitting in the office.</p>

<p>Often though, this isn't enough. When dealing with networks that clients own, they may provide us access through only one entry point, a single development server for instance, which is locked down.</p>

<p>This is where SSH comes in handy. In the <a href="http://www.openssh.com/">OpenSSH</a> implementation of the SSH client tools, the <code class="inline">-L</code> option allows one to setup forwarding of traffic to another host. Suppose, I wanted to connect to a client's Oracle server, listening on port 1521:</p>

<code>$ ssh -N -L 9999:clients.oracle.server.name:1521 user@your.companies.host
</code>

<p>Now instead of pointing our SQL*Plus client to <em>clients.oracle.server.name</em>:1521, we point it to localhost:9999, and traffic is forwarded via <em>your.companies.host</em> as if we were connecting directly from <em>your.companies.host</em>.
</p>

<p>This is extremely powerful, and simple.<a href="#f2">[2]</a></p>

<h3>SOCKS Proxy</h3>

<p>Similar to the tunnelling example above, OpenSSH can act like a <a href="http://en.wikipedia.org/wiki/SOCKS">SOCKS</a> proxy, allowing you to forward outbound traffic to a trusted source, which will then carry out the request on your behalf. This is <em>great</em> for browsing in public <a href="http://en.wikipedia.org/wiki/Wi-Fi" title="Wireless Fidelity">WI-FI</a> spots where attackers might be sniffing for passwords being sent in plain text over HTTP, or some other unencrypted protocol.<a href="#f3">[3]</a></p>

<p>And, of course, setting it up is as easy as passing the <code class="inline">-D</code> option to ssh when connecting to you@remoteserver.</p>

<code>$ ssh -N -D 8000 user@remoteserver</code>

<p>Then, you can setup your computer (or web browser) to use a SOCKS proxy, and point it to localhost:8000.</p>

<p>This isn't without its problems though. For one, the network could block all outbound traffic except HTTP/HTTPS. One obvious workaround is to have a remote server listening for SSH connections on port 143 or port 80, instead of the protocol default of 22. But, you'll of course need your own box, or <a href="http://en.wikipedia.org/Virtual_private_server" title="Virtual Private Server">VPS</a> for this, as your shared hosting account will probably not allow you to change sshd's listening port.<a href="#f4">[4]</a></p>

<p>Of course, since SSH is a protocol for sending encrypted network traffic, there are <a href="http://www.ssh.com/support/documentation/online/ssh/adminguide/32/X11_Forwarding.html">many</a> <a href="http://unixwiz.net/techtips/ssh-agent-forwarding.html">other</a> uses for it. These are just the two alternatives I find the most useful lately.</p>

<ol class="footnotes">
<li id="f1">
I use the <a href="http://www.ccil.org/jargon/jargon_23.html#TAG833">jargon file's</a> definition of hacker, not the commonly confused term <a href="http://www.ccil.org/jargon/jargon_18.html#TAG365">cracker</a>.
</li>

<li id="f2">
It can of course get much, much more complicated
</li>

<li id="f3">
Unencrypted WIFI traffic is extremely easy to capture, with a tool like <a href="http://www.tcpdump.org">tcpdump</a>
</li>

<li id="f4">
The thought of a "loopback" SOCKS proxy, "loopback" tunnel or some combination of the two cannot work, as it would only ever forward traffic to your localhost's sshd, which would then forward traffic to the destination, unencrypted, over the local network&mdash;this is the exact situation we were trying to avoid. Plus, if you're trying to forward traffic in this way, over a port that's being blocked, it's still blocked.
</li>
</ol>
]]></content></entry>
<entry><title>The Power That is GNU Emacs</title><link href="/2009/Apr/30/the-power-that-is-gnu-emacs.html"/><id>md5:5956c986d4c2f11dbf3231b781690d06</id><updated>2009-04-30T00:00:00Z</updated><content type="html"><![CDATA[<p><span class="preamble">If you've never been convinced before that <a href="http://www.gnu.org/software/emacs">Emacs</a> is the text editor in which dreams are made from, or that inside Emacs there are unicorns manipulating your text, don't expect me to convince you. 
</span></p>

<p>I'm not going to sit here and type out a Top 10 list of reasons <em>you</em> should be using GNU Emacs, nor am I going to tell you that you are an idiot for using VI (I was a hardcore, "down with emacs," VI user in the late 90s and early 00s). Instead, I'm going to talk about why Emacs works for <em>me</em>. If you're so inclined to give it a try after reading this, then so be it. Searching <a href="http://www.google.com/search?q=emacs+tutorial" title="Google Search Query for 'emacs tutorial'">Google</a> is bound to get you a ton of good information, or you could just start Emacs by typing <code class="inline">emacs</code> at the terminal and typing <code class="inline">C-h</code> (<code class="inline">C-</code> means hold down the control key and hit <code class="inline">h</code> [in this case]. <code class="inline">M-<em>key</em></code> means hold down the Meta key [ALT on most keyboards] and hit <code class="inline"><em>key</em></code>. If there's not a <code class="inline">-</code> between them, you can release Control or Meta before hitting the <em>key</em>).</p>

<p>I first started using Emacs in the spring of 2003, when an acquaintance at the time suggested that Emacs was superior and that I could even use <a href="http://www.emacswiki.org/emacs/ViperMode" title="Viper Mode - VI keybindings for Emacs">viper-mode</a> to simulate VI. The idea that a text editor was powerful enough to simulate another caught my curiosity. I fired it up, and hit the backspace key. Within moments I was put off when the Emacs equivalent of <a href="http://en.wikipedia.org/wiki/Clippy">Clippy</a>, came to my rescue.</p>

<p>See, Emacs responds logically to <code class="inline">C-h</code>, with "Help." The problem is that on many modern keyboards, the backspace key and <code class="inline">C-h</code> send the same value to the terminal.</p>

<p>So, I fired up <a href="http://www.getfirefox.com">Phoenix</a> (or was it Firebird then? Maybe it was Fireweasel?) and searched Google for "emacs backspace problem." Within .004 seconds I had over 3 million pages telling me how to fix the problem. It said to add:</p>

<code class="lisp">(global-set-key "\C-h" 'delete-backward-char)</code>

<p>to my ~/.emacs file. So, I went to my terminal and did what anyone would have done in my situation&mdash;I typed <code class="inline">vi ~/.emacs</code>, pasted the snippet and <code class="inline">ESC :wq!</code>'d</p>

<p>But, despite my trouble I was intrigued. First of all, I had never seen a Unix program configured the way it was. Why didn't Emacs just use something like <a href="http://en.wikipedia.org/wiki/INI_file">INI</a> files, or some other simple format? Later, I realized that I wasn't just configuring Emacs&mdash;no, I was <em>programming</em> the editor to behave the way <em>I</em> preferred.</p>

<p>And, you'll say, "Well, how is that any different than configuration?" To, which I'll reply, "Every command you invoke, even the command that inserts the letter 'j' into this quote here, is calling a function written in the language I used before to set <code class="inline">C-h</code> to behave the way I preferred."</p>

<p>You see, Emacs isn't a text editor. Emacs is a programming language that you can use to write your <em>own</em> text editor. That's why <code class="inline">viper-mode</code> exists. Someone used Emacs to write VI.</p>

<p>And, as I read more about Emacs, and about all the editors people have written (that is to say, editors for writing C, Perl, Python, etc), I got more excited; that is until I discovered <code class="inline">M-x tetris</code>. Why does my editor need <a href="http://en.wikipedia.org/wiki/Tetris">Tetris</a>? It doesn't, and when I discovered more games, I got even more disgusted.</p>

<p>I'm not going to lie&mdash;not even a little bit, in 2003, Emacs was slow. Machines were getting faster, <a href="http://en.wikipedia.org/wiki/RAM">RAM</a> like always was cheap, but it was torture to type <code class="inline">emacs <em>filename</em></code> more than once a day. The games, and all this bloat were obviously the cause right? Well no. It turns out that Emacs has smart ways to load code, so you can save your precious memory. As a naive user, though, I was a bit upset.</p>

<p>So, off to Google again. "Google, How do I speed up Emacs?" "Well, my young Padawan," Google replied, "you should use the server. Add <code class="inline">(server-start)</code> (<code class="inline">M-x describe-function RET server-start RET</code> if you want more info) to your <code class="inline">~/.emacs</code> file and connect with <code class="inline">emacsclient</code>." This was a few days later, and I had a cheat sheet on my desk, so I didn't escape to the terminal and start up VI. This time, I knew to chord <code class="inline">C-x C-f</code>, make my changes and chord <code class="inline">C-x C-s</code>. Easy-peasy.</p>

<p>The common theme here is that documentation for Emacs was easily accessible and there was a seemingly endless community of people answering questions about common pitfalls when getting started with Emacs. As a newbie, this fact made it extremely easy to want to continue learning, and as an advanced user today (can one ever gain the rank of Emacs expert?) this fact still draws me in.</p>

<p>Emacs has since gotten faster as a result of extremely cheap processing power, but VI of course still wins in startup time. It's not a very good metric for comparing the two pieces of software though. For one, I mentioned that Emacs had a server that you could use to keep Emacs going and connect with <code class="inline">emacsclient</code>, but I should also mention that I hardly ever use it. Emacs has an extensive file browser (with tab-completion!), and support for editing multiple files (called buffers). The other thing Emacs has is a mode called <a href="http://www.gnu.org/software/tramp/">Tramp</a>, which allows Emacs to edit files over <a href="http://www.openssh.com/" title="Secure SHell">SSH</a>, <a href="http://en.wikipedia.org/wiki/FTP" title="File Transfer Protocol">FTP</a> and many more. Since this is the case, keeping one Emacs session alive forever makes startup time nil. VI, on the other hand encourages relaunching with new files. I'm fairly sure modern VIs support editing more than one file at once, but I'm also pretty convinced that most VI users know about 15 things about VI, and multiple file editing isn't one of them.</p>

<p>The reason I even still have <code class="inline lisp">(server-start)</code> in my <code class="inline">~/.emacs</code> has to do with other utilities that need an editor. Invoking <code class="inline">emacsclient <em>filename</em></code> will open <code class="inline"><em>filename</em></code> in the Emacs instance that the server is running in. No startup lag&mdash;but you do unfortunately have to context switch.</p>

<p>Naturally, the Emacs community has solved this problem of context switch for many common cases. One of the places where you're bound to need to startup an editor as a programmer is when interacting with <a href="http://en.wikipedia.org/wiki/Software_configuration_management" title="Source Control Management">SCM</a> tools such as <a href="http://subversion.tigris.org/">Subversion</a>, <a href="http://www.selenic.com/mercurial/wiki/">Mercurial</a> or <a href="http://git-scm.com/">Git</a>. These tools allow you to leave messages when you commit changes back to the repository. Committing is common, as is updating files and working with version control repositories in general, so it's only natural that your editor be version control aware. Emacs is, and uses <a href="http://www.emacswiki.org/emacs/VersionControl"><code class="inline">vc-mode</code></a>.</p>

<p>And the more you think about interactions with computers the more you realize how much of it is still text based. <a href="http://en.wikipedia.org/wiki/IRC">IRC</a>, for instance is entirely text based, so why make it hard on yourself to switch back and forth between running programs when you can switch to an IRC buffer in Emacs? I do that, and it's wonderful.</p>

<p>Todo lists, calendars, calculators, Emacs does it all. It's no wonder that mere mortals joke about Emacs, saying "I'm happy with my operating system, I just want a decent text editor!" I said the same thing, and once I tried it, and took the time to learn it, I could never go back.</p>

<h3>Extending</h3>
<p>Over the years, I've discovered lots of things about Emacs, and new modes to play with. There's a never ending list of things to play with on <a href="http://www.emacswiki.org">EmacsWiki</a> if you're so inclined.
</p>

<p>As a programmer, writing my own enhancements was a matter of learning a bit about <a href="http://en.wikipedia.org/wiki/Emacs_lisp">Emacs Lisp</a>, the <a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a> dialect that Emacs is built on. Coming from a background in C, Perl and at this point in time Python, I laughed at Lisp. "Why would anyone want to write that many parenthesis?" I've since come to the conclusion that Lisp is the most powerful set of programming languages available, but that is a topic for another day. (It is no coincidence, however that the most powerful text editor is built upon a dialect of the most powerful programming language.)</p>

<p>One of the first things I extended Emacs with was a way to convert Windows text files, which use carriage return and a line feed to something more appropriate for editing on Unix (line feed only). I came up with this with some help from our friend Google:</p>

<code class="lisp">(defun dos2unix ()
  "Convert this entire buffer from MS-DOS text file format to UNIX."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (replace-regexp "\r$" "" nil)
    (goto-char (1- (point-max)))
    (if (looking-at "\C-z")
        (delete-char 1))))
</code>

<p>I'm fairly certain that I didn't write that completely from scratch, and I know for certain that I lifted the <code class="inline">(if (looking-at...) ...)</code> from the Internet somewhere as I'm not even sure why I would want to delete <code class="inline">C-z</code> characters from the end of the file.</p>

<p>Either way, the point is the same, now, without a context switch to the terminal, and the need to have the dos2unix package installed on my system, I can open a Windows text file and say, <code class="inline">M-x dos2unix</code>, and I'm in business.</p>

<p>Another utility that I decided I needed was the ability to split the current window in a 3/4, 1/4 configuration, instead of the default 1/2, 1/2 that you get when you call <code class="inline">split-window</code>. The result looks something like this:</p>

<code class="lisp">(defun three-quarters-window ()
  "Resizes current window big"
  (interactive)
  (let ((size (- (truncate (* .75 (frame-height))) (window-height))))
    (if (> size 0)
        (enlarge-window size))))
</code>

<p>Bound to a key, <code class="inline">(global-set-key "\C-x7" 'three-quarters-window)</code>, makes it easy to keep an eye on an IRC buffer or something else that's changing a few lines at a time, while remaining relatively focused on the buffer you're really editing.</p>

<p>As I continue to try out new major modes and spend time programming Emacs to behave the way I want it to, it's only natural that my <code class="inline">~/.emacs</code> file has become a bit large and hard to read. So I built something to fix it. I built something that allowed me to separate customizations into logical units. Basically, it works similarly to the <a href="http://en.wikipedia.org/wiki/Init">init</a> process from Unix.</p>

<p>I call my version activator. It's basically a few functions and a few overridable variables that will load a set of files with a specifically formatted file name in some specific location on your file system.</p>

<p>Using it is as simple as including a few lines in your <code class="inline">~/.emacs</code> file:</p>

<code>;;;; Need to tell Emacs which directory has activator.el
(setq load-path (cons <em>path to directory containing activator.el</em> load-path))
(require 'activator)
(activator-start)
</code>

<p>By default activator will look for files in <code class="inline">~/.emacs.d/activator.d/</code> with the file name format <code class="inline"><em>XX</em>description.el</code>, where <em>XX</em> is a two digit number used for dependency resolution. In other words, <code class="inline">00settings.el</code> will be loaded before <code class="inline">01utils.el</code> if you were to have those files in your activator load path.</p>

<p>The code for doing this is surprisingly simple:</p>

<code class="lisp">(defun activator-start ()
  "Starts activator, thereby running all the files in `activator-load-path' 
that match the `activator-filename-pattern`"
  (interactive)
  (if (not (boundp 'activator-load-path))
      (error "Please set `activator-load-path`")
    (mapcar 'activator-load-file (activator-get-files))))

(defun activator-get-files (&optional path pattern)
  "Gets files from path specified by `activator-load-path', or from the 
optional path"
  (let ((path (or path activator-load-path))
        (pattern (or pattern activator-filename-pattern)))
    (directory-files path t pattern)))

(defun activator-load-file (file)
  (load-file file))
</code>

<p>Of course, the <a href="http://gitorious.com/projects/emacs-configuration/repos/mainline/blobs/master/activator.el">real code</a> defines the variables <code class="inline">activator-filename-pattern</code> and <code class="inline">activator-load-path</code>, which must be overridden before <code class="inline">(activator-start)</code> is run, should you decide you want to change them.</p>

<p>But, the real power in this is that I can rename configuration files to something that doesn't match the filename pattern if I don't want them to load, say because my configuration needs to be different at work, rather than at home. This makes my Emacs customizations pretty portable, and with a few more tweaks to the way activator works, I could make it even more portable.</p>

<p>I'm not going to be naive and think that I'm the first one to come up with something like this. I know for sure I'm not, and the only reason I did it myself was for the exercise of writing Emacs Lisp. All my customizations to Emacs are loaded currently with activator on all the machines that I use Emacs on. It's pretty great.</p>

<p>As a programmer who spends many hours a day using a text editor, the companionship that Emacs provides is a joy, and our relationship just keeps growing better as I uncover the stories and talents, my little friend has to share. </p>
]]></content></entry>
<entry><title>Dispatching With "with"</title><link href="/2009/Mar/04/dispatching-with-with.html"/><id>md5:c47b741e6d7072c9b14a6d5f74c671f1</id><updated>2009-03-04T08:15:00Z</updated><content type="html"><![CDATA[<p>
<span class="preamble">Since <a href="http://www.python.org">Python</a> 2.5, we've had access to a new contstruct called the <a href="http://www.python.org/dev/peps/pep-0343/"><code class="inline">with</code></a>-statement. Using them is as simple as implementing the <a href="http://www.python.org/doc/2.5.2/lib/typecontextmanager.html">context manager protocol</a> for classes.
</span>
</p>

<p>The <code class="inline">with</code>-statement makes it possible to factor our <code class="inline">try</code>/<code class="inline">finally</code> statements that are commonly used to clean up resources created temporarily. Suppose for example, you have a multi-threaded application that makes use of mutexes to guard shared information. As a general rule, once you lock and perform the update on the shared variable, you need to unlock. Failure to unlock can lead to horrible problems, such as starvation or some other inconsistent state. 
</p>

<p>And, what happens if an exception occurs before you unlock? Quite frankly, you're out of luck unless you use <code class="inline">try</code>/<code class="inline">finally</code> to clean up regardless of what happens. It might look something like this:</p>

<code class="python">lock.lock()
try:
    # perform some action
finally:
    lock.unlock()
</code>

<p>This ensures that <code class="inline">lock</code> is unlocked after the action is performed.</p>

<p>Now, using the <code class="inline">with</code>-statement we get something more like:</p>
<code class="python">with lock:
    # perform some action
</code>

<p>The beauty is that we don't have to worry about remembering to call <code class="inline">unlock</code>, or wrap it up in the <code class="inline">try</code>/<code class="inline">finally</code> block. It does it for us.</p>

<p>But, we're not worried about locks here. We're interested in using <code class="inline">with</code> for another purpose, dispatching based on a requested url.</p>

<h3>URL Dispatching</h3>

<p>In many web frameworks these days for Python, such as <a href="http://webpy.org">web.py</a>, resources are dispatched to based on a regular expression that gets matched against the REQUEST_URI environment variable. This is normally pretty powerful, but in the case of web.py, the way this is specified is often a bit awkward. Take for instance:
</p>

<code class="python">import web

urls = (
    '/([a-zA-Z]*)', 'Hello'
)
app = web.application(urls, globals())

class Hello:
    def GET(self, name):
        if not name:
            name = 'world'
        return "Hello,", name

    def POST(self, name): # name can still be in the url
        i = web.input(name='world')
        return "You posted your name! Hello,", i.name

if __name__ == '__main__':
    app.run()
</code>

<p>which is a whole web application written in web.py. The awkwardness comes from the fact that the regular expression used for dispatch, is in no way connected to the resource itself. It'd be nice to use decorators for this so you could get something like:</p>

<code class="python">@web.expose('/([a-zA-Z]*)')
class Hello:
    ...
</code>

<p>but Python didn't get class decorators til Python 3.0, which many people aren't using yet, the author included. And what's the logic behind <code class="inline">def GET(<strong>self</strong>, ...)</code>? It's required in Python, but is just extraneous when defining a resource for web.py.</p>

<p>What if we implemented the context manager protocol in the object returned by <code class="inline">web.application()</code> above that looked like this (or something similiar):
</p>

<code class="python">import inspect
    --snip--
    def __enter__(self):
        return self

    def __exit__(self, *args):
        frame = inspect.currentframe()
        get = frame.f_back.f_locals.get('get', None)
        post = frame.f_back.f_locals.get('post', None)
        resource = {}
        if get:
            resource['get'] = get
        if post:
            resource['post'] = post

        if not (post or get):
            raise ValueError("with must have a get or post function")
        self._resources.append((re.compile(self._last_url), resource))

        if get:
            del frame.f_back.f_locals['get']
        if post:
            del frame.f_back.f_locals['post']

    def expose(self, url):
        self._last_url = url
        return self

    ...
</code>

<p>Then, the simple hello application instead looks like:</p>

<code class="python">import web

app = web.application()

with app.expose('/([a-zA-Z]*)'):
    def get(name):
        if not name:
            name = 'world'
        return "Hello,", name

    def post(name):
        i = web.input(name='world')
        return "You posted your name! Hello,", i.name

if __name__ == '__main__':
    app.run()
</code>

<p>It's declarative, simple, and eliminates a lot of noise, but we no longer get the packaging, or the ability to easily seperate our resources into multiple files. But, for one file web apps, maybe it's useful.</p>
]]></content></entry>
<entry><title>Higher Order PHP</title><link href="/2009/Feb/06/higher-order-php.html"/><id>md5:513adfddef8cc627680095e91c28d467</id><updated>2009-02-06T00:00:00Z</updated><content type="html"><![CDATA[<p><span class="preamble">There's no doubt in my mind that <a href="http://en.wikipedia.org/wiki/Higher_order_programming">Higher order programming</a> is value added to a programmers toolbox, and with the pending release of PHP 5.3, it's about to become much more mainstream.</span></p>

<p><a href="http://www.php.net">PHP</a>, as it stands currently (pre 5.3), already has some support for higher-order programming by passing around the names of functions as strings. It also supports so-called <a href="http://en.wikipedia.org/wiki/Anonymous_functions">anonymous functions</a>, via the <a href="http://www.php.net/create_function"><code class="inline">create_function</code></a> function, though PHP does give those functions a name (something like "<code class="inline">lambda_N</code>"). 
</p>

<p>Functions created in this way, or created in the "normal" PHP way, can then be used in library functions such as <a href="http://www.php.net/array_map"><code class="inline">array_map</code></a>, <a href="http://www.php.net/array_reduce"><code class="inline">array_reduce</code></a> and <a href="http://www.php.net/array_filter"><code class="inline">array_filter</code></a>. These are extremely useful for performing some action on each element of the array passed as an argument, but it seems rare that PHP programmers actually use them in practice.</p>

<p>It may be the case that most PHP programmers don't know about these functions, or it could be the case that these functions are extremely awkward to use currently due to the requirement of having already created the function elsewhere.</p>

<p>See, in nearly every major language that supports higher-order programming, a concept of <a href="http://en.wikipedia.org/wiki/Lexical_closure">closure</a> comes into play. This is extremely useful when creating functions one off anonymous functions to pass around. Basically, when a function is defined within some lexical scope, variables that are "<a href="http://en.wikipedia.org/wiki/Free_variable">free</a>" in that function must be "<a href="http://en.wikipedia.org/wiki/Bound_variable">bound</a>" in an enclosing <a href="http://en.wikipedia.org/wiki/Scope_(programming)">environment</a>, or when one uses a variable it will be undefined, causing an error. The solution is simply to keep a reference to the enclosing environment when the function is created.</p>

<code class="scheme">
(define (make-counter starting) 
   (lambda (increment) ;;; the variable `starting` occurs "free" in this function
      (set! starting (+ starting increment))
      starting))

(define count (make-counter 0))
(define count2 (make-counter 3))

(count 1) ;;; sets starting in the closure 'count' to 1 and returns it
(count2 5) ;;; sets starting in the closure 'count2' to 8 and returns it
(count 3) ;;; sets starting in the closure 'count' to 4 and returns it
</code>

<p>In the example above, <code class="inline">count</code> and <code class="inline">count2</code> both refer to different starting values. <code class="inline">make-counter</code> "closed" over the environment each time it was called and produced closures. <code class="inline">make-counter</code> has the effect of being a function factory that stamps a starting value on the function returned.</p>

<p>So, until the alpha release of PHP 5.3, it was impossible to create a function that referred to it's enclosing environment without lots of hackery. PHP 5.3, makes it possible, but in a slightly awkward way.
</p>

<code class="php">
function make_counter($starting) {
   return function ($increment) use (&$starting) {
      $starting += $increment;
      return $starting;
   };
}
</code>

<p>PHP doesn't allow you to keep a reference to the entire enclosing environment; instead you must explicitly state which variables you want to be able to refer to. Taking that one step further, you must decide whether or not you want that variable to be re-assignable and "pass by reference," if you do. I think it's a little clumsy, but the introduced <code class="inline">use</code> keyword at least makes these things a little bit self-documenting.</p>

<code class="php">
$cnt = make_counter(5);
$cnt2 = make_counter(15);

echo $cnt(5) . " == 10?\n"; // outputs: 10 == 10?
echo $cnt2(-15) . " == 0?\n"; // 0 == 0?
echo $cnt2(5) . " == 5?\n"; // 5 == 5?
</code>

<p>As you can see, it does pretty much the same thing as was done in the Scheme example above.</p>

<p>So now it's time to exploit it.</p>

<h3>Introducing Fn.php</h3>

<p>Throughout the history of <a href="http://en.wikipedia.org/wiki/Functional_programming">functional programming</a>, programmers (and non programmers alike), have identified many useful functions for performing operations. These include the functions above such as <code class="inline">array_map</code>, <code class="inline">array_reduce</code> and <code class="inline">array_filter</code>, but also things like <a href="http://en.wikipedia.org/wiki/Currying"><code class="inline">curry</code></a>, which given a function <code class="inline">g</code> and an argument <code class="inline">a</code>, returns a function that promises to call the function <code class="inline">g</code> with the argument <code class="inline">a</code> plus whatever arguments are passed to it. In effect, <code class="inline">curry</code>, delays the function call until more knowledge is known. (Incidently, the <code class="inline">make-counter</code> function uses currying.)</p>

<p><a href="http://hg.apgwoz.com/fn-php">Fn.php</a> is an attempt to define lots of useful higher-order functions to PHP, and fix some of the things that are inconsistent with the others. Fn.php already supports the things in PHP that already exist, but adds <code class="inline">foldr</code>, <code class="inline">compose</code>, <code class="inline">zip</code>, <code class="inline">andf</code>, <code class="inline">orf</code>, <code class="inline">not</code>, <code class="inline">any</code>, <code class="inline">every</code>, <code class="inline">curry</code>, <code class="inline">I</code>, <code class="inline">K</code>, <code class="inline">S</code>, <code class="inline">flip</code> and a new short hand way to define functions with strings.</p>

<p>
There's virtually no documentation, and very little in the way of examples or tests. It was started on a whim yesterday when I woke up, so we'll see where it goes.
</p>
]]></content></entry>
<entry><title>Anagrams Predicate</title><link href="/2009/Jan/08/anagrams-predicate.html"/><id>md5:c7c123380fbc5a9934d6d485b0a050aa</id><updated>2009-01-08T00:00:00Z</updated><content type="html"><![CDATA[<p><span class="preamble">Recently, I spent some time thinking about a simple problem. How do you test if two strings are <a href="http://en.wikipedia.org/wiki/Anagram">anagrams</a> of each other?</span></p>

<p>There are many ways, but the naive solution is to simply sort both strings, character-wise, and then compare the results. In <a href="http://www.python.org">Python</a>, you might do that like so (We'll leave out the fact that anagrams are actually real words and phrases. We also work in a case-sensitive manor [e.g. "JimMorrison" and "MrMojoRisin" isn't truthy, though a simple <code class="inline">s.lower()</code> goes a long way.]):</p>

<code class="python">def isAnagram(str1, str2):
    if len(str1) != len(str2): return False
    return sorted(str1) == sorted(str2)
</code>

<p>Here, I'm using <code class="inline">sorted</code>, a Python <code class="inline">__builtin__</code>, that takes an iterable and produces a sorted list of that iterable. I'm then taking advantage of the fact that Python lists can be compared element-wise with the <code class="inline">==</code> operator. Doing this produces a function that will work on any string, and it's simple to see why. Sort the string "parental" and you get "aaelnprt." Sort the string "paternal" and you still get "aaelnprt." Obviously "aaelnprt" and "aaelnprt" are equivalent. This of course returns <code class="inline">False</code> for the strings "snowman" and "iceman" since they don't compare sorted equally (or non-sorted for that matter).</p>

<p>However, this solution isn't the most efficient use of resources. For one, most sorting algorithms are only <em>O(n log n)</em>, which means in the best case <code class="inline">isAnagram</code> is too. It also needs to allocate two lists to store the results returned by <code class="inline">sorted</code>.</p>

<p>There is of course a way to do better. You just have to think about the problem for a little longer than a minute:</p>

<code class="python">def isAnagramN(str1, str2):
    if len(str1) != len(str2): return False
    counts = defaultdict(lambda: [0, 0])

    for c1, c2 in izip(str1, str2):
        counts[c1][0] += 1
        counts[c2][1] += 1

    for k, v in counts.iteritems():
        if v[0] != v[1]:
            return False
    return True
</code>

<p>This code does not allocate proportionally to the size of the strings, but instead on the diversity of the strings. In other words, <code class="inline">isAnagramN("aaaaaaa", "bbbbbbb")</code> allocates 1 defaultdict, and 2 lists of size 2. Why? Because, the algorithm simply counts up how many times each letter occurs in each string. Of course Python also has to allocate the generators to use for <code class="inline">izip</code> and <code class="inline">counts.iteritems()</code>, but that isn't significant. The big win here of course is that given strings of <em>any</em> length, the algorithm uses only as much space as the diversity of the contents contained in the strings!</p>

<p>As if that wasn't a win enough, this algorithm runs in <em>O(n)</em> on the length of the strings!</p>

<p>But, does it actually make a difference? The answer of course is yes. For strings of significant length, <code class="inline">isAnagramN</code> runs almost 2x as fast as <code class="inline">isAnagram</code>.</p>

<p>The proof is in the bacon, so let's take a look at some numbers. Using Python's <code class="inline">timeit</code> module, I tested strings of length 1 through 100,001, incrementing by 10,000 (I've tested other lengths as well, and reach a similar conclusion). At each length, the test was repeated 50 times. The results are below:</p>

<style type="text/css">
td { text-align: right; }
td.win { background-color: #ADFF2F; font-weight: bold;}
td.first { background: #dddddd; font-weight: bold; color: #222222; }
</style>

<table cellspacing="5" style="margin: 0 auto;">
  <thead>
    <tr>
    <th>Length</th>
    <th>Time isAnagram</th>
    <th>Time isAnagramN</th>
    </tr>
  </thead>
  <tbody>
    <tr>
     <td class="first">1</td><td class="win">0.00043511390686</td><td>0.000530958175659</td>
     </tr>
     <tr>
     <td class="first">10001</td><td>0.657309055328</td><td class="win">0.38395690918</td>
     </tr>
     <tr>
     <td class="first">20001</td><td>1.25437283516</td><td class="win">0.793761968613</td>
     </tr>
     <tr>
     <td class="first">30001</td><td>1.91431283951</td><td class="win">1.15374517441</td>
     </tr>
     <tr>
     <td class="first">40001</td><td>2.55181908607</td><td class="win">1.53560996056</td>
     </tr>
     <tr>
     <td class="first">50001</td><td>3.14615797997</td><td class="win">2.07976388931</td>
     </tr>
     <tr>
     <td class="first">60001</td><td>3.76745486259</td><td class="win">2.30041193962</td>
     </tr>
     <tr>
     <td class="first">70001</td><td>4.48913788795</td><td class="win">2.81828999519</td>
     </tr>
     <tr>
     <td class="first">80001</td><td>5.155148983</td><td class="win">3.09482097626</td>
     </tr>
     <tr>
     <td class="first">90001</td><td>5.67185592651</td><td class="win">3.477850914</td>
     </tr>
     <tr>
     <td class="first">100001</td><td>6.33614587784</td><td class="win">3.94285678864</td>
     </tr>
  </tbody>
</table>

<p>
  Download the code: <a href="http://files.sigusr2.net/anagram.py">anagram.py</a>
</p>
]]></content></entry>
<entry><title>Chocolate Cupcakes</title><link href="/2008/Dec/15/chocolate-cupcakes.html"/><id>md5:3410e6821ebb21b7c929fa42b3144244</id><updated>2008-12-15T00:00:00Z</updated><content type="html"><![CDATA[<p><span class="preamble">Every now and then, I dust off my copy of <em><a href="http://www.amazon.com/gp/product/0262560992?ie=UTF8&tag=siusdesi2-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0262560992">The Little Schemer</a><img src="http://www.assoc-amazon.com/e/ir?t=siusdesi2-20&l=as2&o=1&a=0262560992" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></em> and read a few sections. It's a great book, in a unique and friendly format.</span></p>

<p>Part of the reason I pick up the book time and time again is because re-reading sections of it re-enforces the basic concepts that a Scheme programmer needs to know. Now I'm not saying I don't know these basic concepts, because I do, but my daily routine unfortunately does not involve Scheme. Instead, I spend my time not recursing on <code class="inline">cdr</code>s but using <a href="http://en.wikipedia.org/wiki/Imperative_programming" title="Imperative Programming">imperative</a> style looping constructs.</p>

<p>And, since I like to make my own junk food, it's the perfect book since it leaves pages for jelly stains and provides a chocolate chip cookie recipe. I thought it'd be nice to share my new favorite cupcake recipe, with peppermint icing&mdash;just in time for the holidays. I've stolen <a href="http://www.cs.indiana.edu/~dfried/">Friedman</a> and <a href="http://www.ccs.neu.edu/home/matthias/">Felleisen</a>'s recipe format:</p>

<pre><code class="scheme">
(define (chocolate-cupcakes)
  (bake '(375 degree) '(20 minute)
        (mix (mix '(sugar 1 cup)
                  '(flour 3/2 cup)
                  '(baking-soda 1 teaspoon)
                  '(cocoa 1/3 cup)
                  '(apple-sauce 1/2 cup)
                  '(cold-water 1 cup)
                  '(vanilla 2 teaspoon)
                  '(salt 1/2 teaspoon))
             '(vinegar 2 tablespoon))))

(define (peppermint-icing)
  (mix '(butter 1/2 cup)
       '(powdered-sugar 2 cup)
       '(vanilla 1 teaspoon)
       '(peppermint-extract 2 teaspoon)
       '(milk 3 tablespoon)))
</code></pre>

<p>Enjoy!</p>]]></content></entry>
<entry><title>Python Type Constructors a la OCaml</title><link href="/2008/Sep/30/python-type-constructors-like-ocaml.html"/><id>md5:5c9d3c4e3c5a50bf32b5481935fde949</id><updated>2008-09-30T07:00:00Z</updated><content type="html"><![CDATA[<p>
<span class="preamble">Earlier this summer, I started taking a look at the <a href="http://caml.inria.fr/" title="Objective-Caml">OCaml</a> programming language in anticipation of the compilers class I'm taking this fall.</span>
</p>

<p>OCaml is a strongly, <a href="http://en.wikipedia.org/wiki/Type_system#Static_typing">statically typed</a>, functional language with <a href="http://en.wikipedia.org/wiki/Type_inference">type inference</a>. It's pretty neat, and supports imperative programming as well as object-oriented constructs for when you need them. As a language, I've found few things wrong with it, except for the edit-compile-run cycle (I prefer the edit-run cycle you get in a language like Scheme, or even Python), but OCaml does actually have a toplevel (the toplevel isn't crippled either, but it doesn't seem realistic to not compile for testing, at least I haven't yet found it to be). 
</p>

<p>Anyway, among all the amazing features of OCaml, the two that stand out as being the most useful are pattern matching (on types) and the simplicity of defining new types and creating constructors:</p>

<pre><code class="ocaml">type astnode = 
| AndNode of astnode * astnode
| OrNode of astnode * astnode
| NotNode of astnode 
| IdNode of bool

let rec eval_node (n: astnode) = 
  match n with
  | AndNode (l, r) -> (eval_node l) && (eval_node r)
  | OrNode (l, r) -> (eval_node l) || (eval_node r)
  | NotNode l -> not (eval_node l)
  | IdNode v -> v

eval_node (AndNode (IdNode true, IdNode false)) (* returns false *)
</code></pre>

<p>Of course, the type annotation, <code class="inline">(n: astnode)</code>, is optional due to the type inference engine, but the above example shows a simple example type that might be used when defining a language to do boolean arithmetic. It's quick to see that the combination of type constructors (like the <code class="inline">IdNode</code> above) and pattern matching simplify this incredibly.
</p>

<p>But, we don't get this sort of coolness in Python. No, in Python, we can make classes, but we do not get type checking of any kind, unless of course we do it at runtime manually. That's because Python is <a href="http://en.wikipedia.org/wiki/Type_system#Dynamic_typing">dynamically typed</a>.</p>

<p>On the other hand, if we <em>really</em> want to, we can use the built in functions <code class="inline">isinstance</code> and <code class="inline">type</code> to raise errors when incompatible types are passed along to functions. This is slow, but it works. And, in some cases, like the one I'm about to show, maybe it doesn't matter, if you get certain benefits.</p>

<p>Consider a language, like before, that does boolean arithmetic. It'll support boolean <abbr title="Both true">AND</a> (&amp;), <abbr title="One or the other true">OR</abbr> (|), <abbr title="One or the other true, but not both">XOR</abbr> (^) and NOT (!). A valid expression in this language is of the form <code class="inline">t & !(f | t)</code> which evaluates to <code class="inline">false</code>.</p>

<p>I've created two different parsers for this language. In <a href="http://hg.apgwoz.com/boolinterp/file/0c592ee06c7f/bptuples.py" rel="nofollow">bptuples</a>, I create an <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree" title="Abstract Syntax Tree">AST</a> using Python tuples of the form <code class="inline">('AndNode', t, f)</code>. In <a href="http://hg.apgwoz.com/boolinterp/file/0c592ee06c7f/bpnodes.py" rel="nofollow">bpnodes</a>, however, I take a more elegant approach when building the <abbr title="Abstract Syntax Tree">AST</abbr>&mdash;I create "OCaml like" type constructors.</p>

<pre><code class="python">
ASTNode = deftype('ASTNode', ())
AndNode = deftype('AndNode', (ASTNode, ASTNode,), ASTNode)
OrNode = deftype('OrNode', (ASTNode, ASTNode,), ASTNode)
XorNode = deftype('XorNode', (ASTNode, ASTNode,), ASTNode)
NotNode = deftype('NotNode', (ASTNode,), ASTNode)
IdNode = deftype('IdNode', (bool,), ASTNode)
</code></pre>

<p>This defines all the Python classes needed at runtime. <code class="inline">deftype</code> takes up to 3 arguments. The first argument is the name of the class, the second is a tuple of classes which it can accept as arguments, and the optional third argument is a parent class to inherit from. The optional third argument is only necessary if you need multiple constructors for the same type, as in the case of our OCaml example above, and this example here.</p>

<p>The code for <code class="inline">deftype</code> is actually pretty simple:</p>

<pre><code class="python">
def deftype(name, types, extends=None):
    class _dtype(object):
        def __init__(self, *args):
            for i, a in enumerate(zip(args, self.types)):
                if isinstance(a[0], a[1]):
                    self.__setattr__('op%d' % i, a[0])
                else:
                    raise TypeError("%s expected argument of type " % \
                                        (self.__class__.__name__,
                                         str(a[1])))
    if extends:
        parents = (_dtype, extends,)
    else:
        parents = (_dtype,)
    return type(name, parents, {'types': types})
</code></pre>

<p>Basically, what it does is use the Python built-in <code class="inline">type</code> to construct a class at runtime with an attribute called <code class="inline">types</code> which holds the class names of the expected arguments to the constructor of the type. On construction, the arguments are enumerated and attributes are created of the form <code class="inline">op0</code>...<code class="inline">opN</code>.</p>

<p>It's a mouthful, for sure, but all that means is that when we construct a new <code class="inline">AndNode</code>, we are sure that the arguments the instance was created with are indeed <code class="inline">ASTNode</code>s, and those nodes are accessible at <code class="inline">op0</code> and <code class="inline">op1</code>.</p>

<p>At a cursory glance, you might be thinking, "but what does this actually do for us?" Well, honestly, not much, but you do get to abstract out some more runtime type checking and do dynamic dispatch with the help of some Python decorators. Observe:</p>

<pre><code class="python">
@multimethod(AndNode)
def interpret(ast):
    return interpret(ast.op0) and interpret(ast.op1)

@multimethod(XorNode)
def interpret(ast):
    left = interpret(ast.op0)
    right = interpret(ast.op1)
    return (left or right) and not (left and right)

@multimethod(OrNode)
def interpret(ast):
    return interpret(ast.op0) or interpret(ast.op1)

@multimethod(NotNode)
def interpret(ast):
    return not interpret(ast.op0)

@multimethod(IdNode)
def interpret(ast):
    return ast.op0
</code></pre>

<p>That's the entire interpreter to walk the AST and evaluate boolean expressions, and is called via <code class="inline">interpret(parseBool(tokenizer('t & ! (t | f)')))</code>.</p>

<p>In the tuple version, it's actually shorter when you use <code class="inline">if</code> statements, but this approach is much more readable in my opinion. The <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=101605">multimethod decorator</a> runs the correct <code class="inline">interpret</code> based on the types of arguments.</p>

<p> This is as close to OCaml like  pattern matching that we're going to get, at least as far as I know how to get, but it's sort of cool, and definitely a hack.</p>


]]></content></entry>

</feed>