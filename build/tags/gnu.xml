<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>SIGUSR2: tagged gnu</title><link href="http://sigusr2.net/tags/gnu.xml" rel="self" /><link href="http://sigusr2.net/"/><updated>2011-04-18T07:30:47Z</updated><author><name>Andrew Gwozdziewycz</name></author><id>md5:ec2c8804a8dac6a866e1a43cfce32fc1</id><entry><title>The Power That is GNU Emacs</title><link href="http://sigusr2.net/2009/Apr/30/the-power-that-is-gnu-emacs.html"/><id>md5:5956c986d4c2f11dbf3231b781690d06</id><updated>2009-04-30T00:00:00Z</updated><content type="html"><![CDATA[<p><span class="preamble">If you've never been convinced before that <a href="http://www.gnu.org/software/emacs">Emacs</a> is the text editor in which dreams are made from, or that inside Emacs there are unicorns manipulating your text, don't expect me to convince you. 
</span></p>

<p>I'm not going to sit here and type out a Top 10 list of reasons <em>you</em> should be using GNU Emacs, nor am I going to tell you that you are an idiot for using VI (I was a hardcore, "down with emacs," VI user in the late 90s and early 00s). Instead, I'm going to talk about why Emacs works for <em>me</em>. If you're so inclined to give it a try after reading this, then so be it. Searching <a href="http://www.google.com/search?q=emacs+tutorial" title="Google Search Query for 'emacs tutorial'">Google</a> is bound to get you a ton of good information, or you could just start Emacs by typing <code class="inline">emacs</code> at the terminal and typing <code class="inline">C-h</code> (<code class="inline">C-</code> means hold down the control key and hit <code class="inline">h</code> [in this case]. <code class="inline">M-<em>key</em></code> means hold down the Meta key [ALT on most keyboards] and hit <code class="inline"><em>key</em></code>. If there's not a <code class="inline">-</code> between them, you can release Control or Meta before hitting the <em>key</em>).</p>

<p>I first started using Emacs in the spring of 2003, when an acquaintance at the time suggested that Emacs was superior and that I could even use <a href="http://www.emacswiki.org/emacs/ViperMode" title="Viper Mode - VI keybindings for Emacs">viper-mode</a> to simulate VI. The idea that a text editor was powerful enough to simulate another caught my curiosity. I fired it up, and hit the backspace key. Within moments I was put off when the Emacs equivalent of <a href="http://en.wikipedia.org/wiki/Clippy">Clippy</a>, came to my rescue.</p>

<p>See, Emacs responds logically to <code class="inline">C-h</code>, with "Help." The problem is that on many modern keyboards, the backspace key and <code class="inline">C-h</code> send the same value to the terminal.</p>

<p>So, I fired up <a href="http://www.getfirefox.com">Phoenix</a> (or was it Firebird then? Maybe it was Fireweasel?) and searched Google for "emacs backspace problem." Within .004 seconds I had over 3 million pages telling me how to fix the problem. It said to add:</p>

<code class="lisp">(global-set-key "\C-h" 'delete-backward-char)</code>

<p>to my ~/.emacs file. So, I went to my terminal and did what anyone would have done in my situation&mdash;I typed <code class="inline">vi ~/.emacs</code>, pasted the snippet and <code class="inline">ESC :wq!</code>'d</p>

<p>But, despite my trouble I was intrigued. First of all, I had never seen a Unix program configured the way it was. Why didn't Emacs just use something like <a href="http://en.wikipedia.org/wiki/INI_file">INI</a> files, or some other simple format? Later, I realized that I wasn't just configuring Emacs&mdash;no, I was <em>programming</em> the editor to behave the way <em>I</em> preferred.</p>

<p>And, you'll say, "Well, how is that any different than configuration?" To, which I'll reply, "Every command you invoke, even the command that inserts the letter 'j' into this quote here, is calling a function written in the language I used before to set <code class="inline">C-h</code> to behave the way I preferred."</p>

<p>You see, Emacs isn't a text editor. Emacs is a programming language that you can use to write your <em>own</em> text editor. That's why <code class="inline">viper-mode</code> exists. Someone used Emacs to write VI.</p>

<p>And, as I read more about Emacs, and about all the editors people have written (that is to say, editors for writing C, Perl, Python, etc), I got more excited; that is until I discovered <code class="inline">M-x tetris</code>. Why does my editor need <a href="http://en.wikipedia.org/wiki/Tetris">Tetris</a>? It doesn't, and when I discovered more games, I got even more disgusted.</p>

<p>I'm not going to lie&mdash;not even a little bit, in 2003, Emacs was slow. Machines were getting faster, <a href="http://en.wikipedia.org/wiki/RAM">RAM</a> like always was cheap, but it was torture to type <code class="inline">emacs <em>filename</em></code> more than once a day. The games, and all this bloat were obviously the cause right? Well no. It turns out that Emacs has smart ways to load code, so you can save your precious memory. As a naive user, though, I was a bit upset.</p>

<p>So, off to Google again. "Google, How do I speed up Emacs?" "Well, my young Padawan," Google replied, "you should use the server. Add <code class="inline">(server-start)</code> (<code class="inline">M-x describe-function RET server-start RET</code> if you want more info) to your <code class="inline">~/.emacs</code> file and connect with <code class="inline">emacsclient</code>." This was a few days later, and I had a cheat sheet on my desk, so I didn't escape to the terminal and start up VI. This time, I knew to chord <code class="inline">C-x C-f</code>, make my changes and chord <code class="inline">C-x C-s</code>. Easy-peasy.</p>

<p>The common theme here is that documentation for Emacs was easily accessible and there was a seemingly endless community of people answering questions about common pitfalls when getting started with Emacs. As a newbie, this fact made it extremely easy to want to continue learning, and as an advanced user today (can one ever gain the rank of Emacs expert?) this fact still draws me in.</p>

<p>Emacs has since gotten faster as a result of extremely cheap processing power, but VI of course still wins in startup time. It's not a very good metric for comparing the two pieces of software though. For one, I mentioned that Emacs had a server that you could use to keep Emacs going and connect with <code class="inline">emacsclient</code>, but I should also mention that I hardly ever use it. Emacs has an extensive file browser (with tab-completion!), and support for editing multiple files (called buffers). The other thing Emacs has is a mode called <a href="http://www.gnu.org/software/tramp/">Tramp</a>, which allows Emacs to edit files over <a href="http://www.openssh.com/" title="Secure SHell">SSH</a>, <a href="http://en.wikipedia.org/wiki/FTP" title="File Transfer Protocol">FTP</a> and many more. Since this is the case, keeping one Emacs session alive forever makes startup time nil. VI, on the other hand encourages relaunching with new files. I'm fairly sure modern VIs support editing more than one file at once, but I'm also pretty convinced that most VI users know about 15 things about VI, and multiple file editing isn't one of them.</p>

<p>The reason I even still have <code class="inline lisp">(server-start)</code> in my <code class="inline">~/.emacs</code> has to do with other utilities that need an editor. Invoking <code class="inline">emacsclient <em>filename</em></code> will open <code class="inline"><em>filename</em></code> in the Emacs instance that the server is running in. No startup lag&mdash;but you do unfortunately have to context switch.</p>

<p>Naturally, the Emacs community has solved this problem of context switch for many common cases. One of the places where you're bound to need to startup an editor as a programmer is when interacting with <a href="http://en.wikipedia.org/wiki/Software_configuration_management" title="Source Control Management">SCM</a> tools such as <a href="http://subversion.tigris.org/">Subversion</a>, <a href="http://www.selenic.com/mercurial/wiki/">Mercurial</a> or <a href="http://git-scm.com/">Git</a>. These tools allow you to leave messages when you commit changes back to the repository. Committing is common, as is updating files and working with version control repositories in general, so it's only natural that your editor be version control aware. Emacs is, and uses <a href="http://www.emacswiki.org/emacs/VersionControl"><code class="inline">vc-mode</code></a>.</p>

<p>And the more you think about interactions with computers the more you realize how much of it is still text based. <a href="http://en.wikipedia.org/wiki/IRC">IRC</a>, for instance is entirely text based, so why make it hard on yourself to switch back and forth between running programs when you can switch to an IRC buffer in Emacs? I do that, and it's wonderful.</p>

<p>Todo lists, calendars, calculators, Emacs does it all. It's no wonder that mere mortals joke about Emacs, saying "I'm happy with my operating system, I just want a decent text editor!" I said the same thing, and once I tried it, and took the time to learn it, I could never go back.</p>

<h3>Extending</h3>
<p>Over the years, I've discovered lots of things about Emacs, and new modes to play with. There's a never ending list of things to play with on <a href="http://www.emacswiki.org">EmacsWiki</a> if you're so inclined.
</p>

<p>As a programmer, writing my own enhancements was a matter of learning a bit about <a href="http://en.wikipedia.org/wiki/Emacs_lisp">Emacs Lisp</a>, the <a href="http://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</a> dialect that Emacs is built on. Coming from a background in C, Perl and at this point in time Python, I laughed at Lisp. "Why would anyone want to write that many parenthesis?" I've since come to the conclusion that Lisp is the most powerful set of programming languages available, but that is a topic for another day. (It is no coincidence, however that the most powerful text editor is built upon a dialect of the most powerful programming language.)</p>

<p>One of the first things I extended Emacs with was a way to convert Windows text files, which use carriage return and a line feed to something more appropriate for editing on Unix (line feed only). I came up with this with some help from our friend Google:</p>

<code class="lisp">(defun dos2unix ()
  "Convert this entire buffer from MS-DOS text file format to UNIX."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (replace-regexp "\r$" "" nil)
    (goto-char (1- (point-max)))
    (if (looking-at "\C-z")
        (delete-char 1))))
</code>

<p>I'm fairly certain that I didn't write that completely from scratch, and I know for certain that I lifted the <code class="inline">(if (looking-at...) ...)</code> from the Internet somewhere as I'm not even sure why I would want to delete <code class="inline">C-z</code> characters from the end of the file.</p>

<p>Either way, the point is the same, now, without a context switch to the terminal, and the need to have the dos2unix package installed on my system, I can open a Windows text file and say, <code class="inline">M-x dos2unix</code>, and I'm in business.</p>

<p>Another utility that I decided I needed was the ability to split the current window in a 3/4, 1/4 configuration, instead of the default 1/2, 1/2 that you get when you call <code class="inline">split-window</code>. The result looks something like this:</p>

<code class="lisp">(defun three-quarters-window ()
  "Resizes current window big"
  (interactive)
  (let ((size (- (truncate (* .75 (frame-height))) (window-height))))
    (if (> size 0)
        (enlarge-window size))))
</code>

<p>Bound to a key, <code class="inline">(global-set-key "\C-x7" 'three-quarters-window)</code>, makes it easy to keep an eye on an IRC buffer or something else that's changing a few lines at a time, while remaining relatively focused on the buffer you're really editing.</p>

<p>As I continue to try out new major modes and spend time programming Emacs to behave the way I want it to, it's only natural that my <code class="inline">~/.emacs</code> file has become a bit large and hard to read. So I built something to fix it. I built something that allowed me to separate customizations into logical units. Basically, it works similarly to the <a href="http://en.wikipedia.org/wiki/Init">init</a> process from Unix.</p>

<p>I call my version activator. It's basically a few functions and a few overridable variables that will load a set of files with a specifically formatted file name in some specific location on your file system.</p>

<p>Using it is as simple as including a few lines in your <code class="inline">~/.emacs</code> file:</p>

<code>;;;; Need to tell Emacs which directory has activator.el
(setq load-path (cons <em>path to directory containing activator.el</em> load-path))
(require 'activator)
(activator-start)
</code>

<p>By default activator will look for files in <code class="inline">~/.emacs.d/activator.d/</code> with the file name format <code class="inline"><em>XX</em>description.el</code>, where <em>XX</em> is a two digit number used for dependency resolution. In other words, <code class="inline">00settings.el</code> will be loaded before <code class="inline">01utils.el</code> if you were to have those files in your activator load path.</p>

<p>The code for doing this is surprisingly simple:</p>

<code class="lisp">(defun activator-start ()
  "Starts activator, thereby running all the files in `activator-load-path' 
that match the `activator-filename-pattern`"
  (interactive)
  (if (not (boundp 'activator-load-path))
      (error "Please set `activator-load-path`")
    (mapcar 'activator-load-file (activator-get-files))))

(defun activator-get-files (&optional path pattern)
  "Gets files from path specified by `activator-load-path', or from the 
optional path"
  (let ((path (or path activator-load-path))
        (pattern (or pattern activator-filename-pattern)))
    (directory-files path t pattern)))

(defun activator-load-file (file)
  (load-file file))
</code>

<p>Of course, the <a href="http://gitorious.com/projects/emacs-configuration/repos/mainline/blobs/master/activator.el">real code</a> defines the variables <code class="inline">activator-filename-pattern</code> and <code class="inline">activator-load-path</code>, which must be overridden before <code class="inline">(activator-start)</code> is run, should you decide you want to change them.</p>

<p>But, the real power in this is that I can rename configuration files to something that doesn't match the filename pattern if I don't want them to load, say because my configuration needs to be different at work, rather than at home. This makes my Emacs customizations pretty portable, and with a few more tweaks to the way activator works, I could make it even more portable.</p>

<p>I'm not going to be naive and think that I'm the first one to come up with something like this. I know for sure I'm not, and the only reason I did it myself was for the exercise of writing Emacs Lisp. All my customizations to Emacs are loaded currently with activator on all the machines that I use Emacs on. It's pretty great.</p>

<p>As a programmer who spends many hours a day using a text editor, the companionship that Emacs provides is a joy, and our relationship just keeps growing better as I uncover the stories and talents, my little friend has to share. </p>
]]></content></entry>

</feed>