<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title>SIGUSR2: tagged greenlet</title><link href="http://sigusr2.net/tags/greenlet.xml" rel="self" /><link href="http://sigusr2.net/"/><updated>2011-08-09T15:40:06Z</updated><author><name>Andrew Gwozdziewycz</name></author><id>md5:ec2c8804a8dac6a866e1a43cfce32fc1</id><entry><title>Code Blogging: Call With Current Continuation for Python</title><link href="http://sigusr2.net/2011/Aug/09/call-cc-for-python.html"/><id>md5:8500c32ef5f06561d93db07571665afe</id><updated>2011-08-09T00:00:00Z</updated><content type="html"><![CDATA[<p><span class="preamble"><a href="http://en.wikipedia.org/wiki/Continuation">Continuations</a> are a snapshot of the programs control state at a given time. The concept exists in every language, but only some allow a programmer to bundle it up into an actual object to manipulate in some way.</p>

<p>That bundled, first-class, version of a continuation is applyable, like a function, and depending on the language is either invokable once (one-shot) or multiple times (multi-shot). In the case of multi-shot continuations, one can imagine a great number of use cases such as building coroutines, efficient backtracking and stateful web-servers.</p>

<p>For one-shot continuations, the number of things that can be done with them is more limited, but they are still extremely useful. <strike>These are often described as "escape-continuations" and are often compared to something like <code class="inline">setjmp</code> / <code class="inline">longjmp</code>&mdash;they can "escape" back to a save point, but can never jump forward. As such, often the example given for uses of them is exception handling.</strike><strong><sup><a href="#note-haste-in-writing">[1]</a></sup></strong> For instance, one couldn't implement nondeterminism as in Prolog because the continuation needs to be invoked multiple times to collect multiple values<sup><a href="#note-one-shot">[2]</a></sup></p>

<p>Anyway, most languages do not have either type of first class continuations, and more often than not, already have the common use cases of them as part of the language.</p>

<p>For example, Python has exception handling built in, as well as the <code class="inline">yield</code> statement which supports a limited coroutine mechanism. For actual coroutines, an extension called <a href="http://pypi.python.org/pypi/greenlet">greenlet</a> can be used, which implements symmetric coroutines<sup><a href="#note-symmetric-coroutines">[3]</a></sup>.

<p>What do coroutines have to do with continuations, aside from the fact that multi-shot continuations can be used to implement coroutines?</p>

<p>Well, it turns out<sup><a href="#note-revisiting-coroutines">[4]</a></sup> that symmetric coroutines are all that is needed to support one-shot continuations, and with greenlet, this can be done in Python:</p>

<pre><code class="python">import greenlet

class ContinuationError(Exception): pass

def callcc(f):
    saved = [greenlet.getcurrent()]

    def cont(val):
        if saved[0] == None:
            raise ContinuationError("one shot continuation called twice")
        else:
            return saved[0].switch(val)

    def new_cr():
        v = f(cont)
        return cont(v)

    value_cr = greenlet.greenlet(new_cr)
    value = value_cr.switch()
    saved[0] = None
    return value
</code></pre>

<p>Its use is illustrated in the following simple example which adds 3 numbers, but only when the first one is not 5. In that case, 0 is returned from the computation:</p>

<pre><code class="python">def add3(x, y, z):
    def add_x_but_not_when_5(cont):
        if x == 5:
            cont(0)
        else:
            cont(x + y + z)
    return callcc(add_x_but_not_when_5)
</code></pre>

<p>Using it:</p>

<pre><code class="python">&gt;&gt;&gt; add3(5, 6, 7)
0
&gt;&gt;&gt; add3(6, 7, 8)
21
&gt;&gt;&gt;
</code></pre>



<ol class="footnotes">
    <li id="note-haste-in-writing">My haste in writing caused me to write something that wasn't correct. One-shot continuations and escape continuations are not the same thing. Thanks to the commenter below who pointed out my error.</li>
    <li id="note-one-shot">Carl Bruggeman, Oscar Waddell, and R. Kent Dybvig; "Representing control in the presence of one-shot continuations"; In Proceedings of the SIGPLAN '96 Conference on Programming Language Design and Implementation, 99-107, May 1996.</li>
    <li id="note-symmetric-coroutines">Symmetric coroutines have a single control transfer which allows them individually to switch amongst themselves. In the Greenlet library, this is the <code class="inline">switch</code> method. Asymmetric coroutines, which is the other type, have two control operations, <code class="inline">yield</code> and <code class="inline">resume</code>, which makes them subordinates to their caller.</li>
    <li id="note-revisiting-coroutines">Ana Lucia de Moura and Roberto Ierusalimschy; "Revisiting Coroutines"; 2004</li> 
</ol>
]]></content></entry>

</feed>