title: Technical Interviews Make Me Smile
date: 2013-9-17
tags: interviews, jobs
published: True
---
<p>
   <span class="preamble">Pamela Fox recently posted about her experiences with technical interviews and how they make her <a href="http://blog.pamelafox.org/2013/09/technical-interviews-make-me-cry.html">cry</a>, but I have to admit&mdash;I rather <em>like</em> technical interviews.</span>
</p>

<p>I certainly understand her points. Interviews can be intimidating, and frightening for many people, and as an interviewer these things should be in the back of your head. When I was conducting interviews at <a href="http://okcupidlabs.com">Labs</a>, I attempted to make our interviewees as comfortable as possible, though when there's a rigorous, 4-5 hour process and lunch with the team, it's a bit daunting anyway.</p>

<p>Recently, I've been on the interviewee side of things, and have interviewed with 9 companies<sup><a id="return-companies" href="#note-companies">[1]</a></sup> to date. I have to admit, I've enjoyed the interviews from all but 1 company, and have done very little to "prepare"<sup><a href="#note-prepare">[2]</a></sup> for them.</p>

<p>It's likely that you, dear reader, don't believe me, or think I'm batshit crazy, but here me out. Technical interviews, when done right<sup><a id="return-right" href="#note-right">[3]</a></sup> (or remotely right) bring with them a large variety of <em>interesting</em> programming challenges and puzzles. By puzzles, I don't mean how many barbers are there in NYC, or why are manhole covers round? Real puzzles. Like, refactor some code, or build a <a href="https://github.com/apgwoz/angmines">Minesweeper clone</a>. Or, puzzles stemming from a <em>real</em> problem that the company has that they want your (free) ideas for solving.</p>

<p>So far, I've written a date parser (actually, given a bunch of dates, figure out the format), built a <a href="https://github.com/apgwoz/truckstop">food truck map of San Francisco</a>, wrote a text indexing engine, thought about algorithms for reconstructing a jigsaw puzzle, built a simple key-value store, replaced nagios, spec'd out a real-time HTTP request debugger, designed tumblr's infrastructure, designed heuristics to cut down a search problem, and built a Texas Hold'em game. Where else do you get such an interesting and diverse set of problems to tackle?</p>

<p>I've found the key to interviewing is simple&mdash;be yourself, and let your past experiences guide you. And if you truly don't know the answer, talk it out, make some reasonable guesses and let the interviewer guide you. If they're worth working for, they won't leave you hanging.</p>


<ol class="footnotes">
    <li id="note-companies">3 in person on the west coast, 2 phone interviews with invitations to fly out, 1 offer before deciding we were staying in NYC (4 here so far, no offers yet). Why should you trust me? I've had a bad interview/offer ratio. Well, everyone keeps assuring me the lack of offer is a result of other non-technical reasons, meaning philosophy, work style, etc.  Of course, I have no clue if that's true or not.<a href="#return-companies">&crarr;</a></li>
    <li id="note-prepare">I'm not being cocky, but I don't find it necessary to prep. Unless I think it's going to be heavy on math&mdash;my math skills have severely atrophied over the years. It's just too difficult to predict what kinds of things to prepare for, and preparation only serves to make me more nervous. My advice, relax by writing some code or read something technical the night before. Get yourself into that type of mindset.<a href="#return-prepare">&crarr;</a></li>
    <li id="note-right">The best experiences so far have been writing code in front of a computer. Even better was the company who asked that I bring in my laptop so as to be as comfortable as possible.<a href="#return-right">&crarr;</a></li>
</ol>
