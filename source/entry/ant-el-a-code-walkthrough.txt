title: ant.el: A Code Walkthrough
date: 2010-10-29
tags: emacs, ant, walkthrough
comments: True
---
<p><span class="preamble">In April of last year, I blogged about <a href="http://sigusr2.net/2009/Apr/30/the-power-that-is-gnu-emacs.html">how powerful Emacs</a> is, and shared my enlightenment story.</span></p>

<p>Today, I'm even closer to Emacs than I was before, having an extra year and a half of experience than I did then. My daily interactions with Emacs are still very much in the same vain&mdash;I am still a programmer after all, but I've also discovered some more frustrations which were fairly easy to rectify.</p>

<p>In July of this year, I started <a href="http://www.meetup.com/">a new job</a><sup><a href="#hiring-1">[1]</a></sup>. My role at Meetup has been different in many regards than my previous jobs. It's the first role I've had since entering into the industry that someone doesn't see the output of my code. In fact, if they do see the output of my code, I've sort of failed.<sup><a href="#output-2">[2]</a></sup> It also represents the first time that I've primarily used a compiled language (outside of college), targetted the <a href="http://en.wikipedia.org/wiki/JVM">JVM</a> and used <a href="http://java.sun.com/">Java</a> for the bulk of my work.</p>

<p>Naturally, Emacs could help me. <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html">Compilation Mode</a>, for instance allows you to do <code class="inline">M-x compile</code> to run <a href="http://en.wikipedia.org/wiki/Make_(software)">make</a>, or <a href="http://ant.apache.org/">ant</a> (with <code class="inline">-emacs</code>) or some other build tool that generates compilation mode compatible output, that the mode will then mark up and allow you to easily jump to places the compiler thinks<sup><a href="#errors-3">[3]</a></sup> are errors.</p>

<p>Compilation Mode by default is fine, but complicated Java source trees are normally nested quite complexly and ant isn't the greatest at locating a suitable build file. What I needed were some interactive functions that I could use to run ant properly, in Compilation Mode using the project's build file. What I <a href="http://github.com/apgwoz/ant-el">came up with</a> after a few hours, works fairly well.</p>

<p>Basically, instead of <code class="inline">M-x compile</code>, I type <code class="inline">M-x ant</code>, or <code class="inline">M-x ant-compile</code>, or <code class="inline">M-x ant</code> and then TAB complete all the available build targets. This allows me to save some typing, and save some precious brain cells, since I don't have to remember all 40 build targets.</p>

<p>The code is fairly simple, and I think it's a great candidate for a walk through on how to solve your own problems using Emacs Lisp, so I'd like to go through it here.</p>

<p>The code starts out simply enough:</p>

<pre><code class="elisp">(defvar ant-last-task "compile")
(defvar ant-build-file-name "build.xml")
(defvar ant-command "ant -emacs")
(defvar *ant-tasks-cache* '())
(defvar *ant-tasks-command* "grep -e '&lt;target.*name=\"[^\-][^\"]*.*$'")
(defvar ant-tasks-default '("compile" "test" "clean"))</code></pre>

<p>We just define a bunch of global variables that can be overridden by a user if they need to be. We do however create <code class="inline">*ant-tasks-cache*</code> and <code class="inline">*ant-tasks-command*</code> which are meant to be internal state. In elisp, and other Lisps, wrapping * around a variable normally indicates that the variable is special in someway, here it means it's a global and shouldn't be modified outside of the functions defined within.</p>

<p>Next we have a helper function, <code class="inline">ant-find-tasks</code>, which, given a directory, issues a shell command <code class="inline">*ant-tasks-command*</code> that is used to extract the lines from the ant build file that declare targets:</p>

<pre><code class="elisp">(defun ant-find-tasks (directory)
  (let ((output (shell-command-to-string (concat *ant-tasks-command* " "
                                                 directory "/"
                                                 ant-build-file-name))))
    (if (> (length output) 0)
        (mapcar '(lambda (x) (replace-regexp-in-string ".*&lt;target.*name=\"\\([^\-][^\"]*\\).*" "\\1" x)) 
                (split-string output "[\n]"))
      nil)))</code></pre>

<p>Essentially, we first save the output of the shell command that gets built up to the variable <code class="inline">output</code>. If the length of <code class="inline">output</code> is greater than 0, we split the output (<code class="inline">split-string</code>) into individual lines, and iteratively replace the junk in the line with just the name of the target (<code class="inline">replace-regexp-in-string</code>). The only non-obvious thing in here is <code class="inline">mapcar</code> which is a fancy way of transforming a list into another list via the function passed as the first argument.</p>

<p>That gives us all the tasks defined in the build file&mdash;well for most cases anyway. It doesn't handle all possible, valid build.xml files, but should work if the <code class="inline">target</code>'s declaration and name attribute appear on the same line.</p>

<p>When we need a list of tasks for a project, we call <code class="inline">ant-tasks</code>. This function really just caches the returned value of <code class="inline">ant-find-tasks</code> into the global variable <code class="inline">*ant-tasks-cache*</code> for the current project:</p>

<pre><code class="elisp">(defun ant-tasks (directory)
  (let ((tasks (assoc-string directory *ant-tasks-cache*)))
    (or tasks
        (progn 
          (let ((newtasks (or (ant-find-tasks directory) ant-tasks-default)))
            (setq *ant-tasks-cache*
                  (cons (cons directory newtasks) *ant-tasks-cache*))
          newtasks)))))</code></pre>

<p>The only interesting thing about the above code is the use of <code class="inline">or</code>. In Lisp, <code class="inline">or</code> short circuits and returns the first truthy value&mdash;it doesn't convert it to a boolean, so it can easily be used to select the first truthy value from a list of values. That's what's happening there.</p>

<p>I mentioned that I wanted TAB completion on task names so as to not clutter my brain matter with useless task names:</p>

<pre><code class="elisp">(defun ant-get-task (directory)
  (let ((task (completing-read-multiple (concat "Task (default): ") 
                                        (ant-tasks directory))))
    (if (> (length task) 0)
        (mapconcat 'identity task " ")
      "")))</code></pre>

<p>Well, here it is. Emacs has built in completion via the <code class="inline">completing-read</code> function. Here, we want the ability to issue one or more tasks, so we use <code class="inline">completing-read-multiple</code> to get the job done. Notice we're calling our function from above, <code class="inline">ant-tasks</code>.</p>

<p>You'll notice <code class="inline">mapconcat</code> above. It's like <code class="inline">mapcar</code> from above, in that it takes a list of things and transforms them, but instead of returning a new list, it concatenates the elements into a string using the last argument (here just a space) as a separator. <code class="inline">completing-read-multiple</code> returns to us a list, which we need to turn into a string with spaces between the targets in order to issue the build command.</p>

<pre><code class="elisp">(defun ant-find-root (indicator)
  (let ((cwd default-directory))
    (while (and (not (file-exists-p (concat cwd indicator)))
                (not (string-equal (expand-file-name cwd) "/")))
      (setq cwd (concat cwd "../")))
    (if (file-exists-p (concat cwd indicator))
        (expand-file-name cwd)
      nil)))</code></pre>

<p>The above function locates the base directory of the project, given the current file being edited. It just loops up the file system looking for the first directory it finds that has a build file in it. When I originally wrote this function, I didn't realize that Emacs already had this functionality built into it with the function <code class="inline">locate-dominating-file</code>.<sup><a href="#dominating-4">[4]</a></sup>

<p><code class="inline">ant-kill-cache</code>,</p>

<pre><code class="elisp">(defun ant-kill-cache ()
  (interactive)
  (setq *ant-tasks-cache* '()))</code></pre>

<p>does exactly what it says it does. It destroys the cache that is built up from <code class="inline">ant-tasks</code>.

<p>The main entry point, <code class="inline">ant</code>, is fairly trivial as well. It sets the variable <code class="inline">default-directory</code>, which is Emacs' current working directory, to the project directory, reads a task from the reader (if being called interactively) and calls <code class="inline">compile</code>, which is the main entry point into Compilation Mode.</p>

<pre><code class="elisp">(defun ant (&optional task)
  "Run ant `task` in project root directory."
  (interactive)
  (let ((default-directory (ant-find-root ant-build-file-name)))
    (if default-directory
        (let ((task (or task (ant-get-task default-directory))))
          (setq ant-last-task task)
          (compile (concat ant-command " " task)))
      (message "Couldn't find an ant project."))))</code></pre>

<p>In the first code block, there was a variable, <code class="inline">ant-last-task</code>, defined that is used above to store the last target run. After a target is given, it's saved off in there.</p>

<pre><code class="elisp">(defun ant-last ()
  "Run the last ant task in project"
  (interactive)
  (ant (or ant-last-task "")))

(defun ant-compile ()
  (interactive)
  (ant "compile"))

(defun ant-clean ()
  (interactive)
  (ant "clean"))

(defun ant-test ()
  (interactive)
  (ant "test"))</pre></code>

<p>The rest of the code above, just defines some convenient, interactive commands for common targets. <code class="inline">M-x ant-compile</code> will just issue the compile target, likewise for <code class="inline">ant-clean</code>. The only moderately interesting interactive command here is <code class="inline">ant-last</code> which reuses the variable <code class="inline">ant-last-task</code> from above to redo the last compilation.</p>

<p>It doesn't feel like much code, and in all reality it's not. However, it has saved me quite a bit of time, as I don't have to go running to a terminal (either switching buffers, or switching windows entirely) in order to issue an ant task. I just do something I've grown very accustomed to&mdash;I issue another Emacs command, and let Emacs take care of it for me.</p>

<ol class="footnotes">
    <li id="hiring-1">We're hiring for <a href="http://www.meetup.com/jobs">most positions</a>.</li>
    <li id="output-2">Most of what I do is related to our product's infrastructure&mdash;not interaction, and not engineering new features. My work would be visible if some error leaked to your browser, and that'd probably be bad.</li> 
    <li id="errors-3">It's fairly difficult to trick the compiler, but in Java, for instance, you can write type-safe code using Generics that it can't prove is safe. If you do that though, you should make use the SuppressWarnings annotation to tell the compiler it's OK.</li>
    <li id="dominating-4">Actually, I wasn't surprised that Emacs actually had the functionality, just that the name is non-trivial. I gave up looking for it after a couple of minutes and just rolled my own. I'll replace it in a future version, but the existing code works for now.</li>
</ol>
